/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import models.*;
import radar.*;
import java.io.File;
import javax.swing.Timer;

/**
 *
 * @author Daniel
 */
public class radarFrame extends javax.swing.JFrame {

    public boolean tablesAreFull = false;
    
    public Color colourCpax = Color.RED;
    public Color colourMrc = Color.GREEN;
    public Color colourSofa = Color.BLUE;

    public String missingData = "12345";
    public String dataPath = "";
    public int dataCount;
    public Patient[] arrayPatients;

    public DefaultListModel listModelPatients = new DefaultListModel();
    public DefaultListModel listModelPatientVisits = new DefaultListModel();

    // Make this model uneditable
    public DefaultTableModel tableModelPatientIDs = new DefaultTableModel(new String[]{""}, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    ;
    };
    
    public DefaultTableModel tableModelPatientOverview = new DefaultTableModel(new String[]{"POID", "First Name", "Last Name", "CPAX Total", "MRC Total", "SOFA Total"}, 0);
    public DefaultTableModel tableModelCpaxScores = new DefaultTableModel(new String[]{"[#]", "Item", "Score"}, 0);
    public DefaultTableModel tableModelMrcScores = new DefaultTableModel(new String[]{"[#]", "Item", "Score"}, 0);
    public DefaultTableModel tableModelSofaScores = new DefaultTableModel(new String[]{"[#]", "Item", "Score"}, 0);

    public String selectedPatient;
    public String selectedAdmission;
    
    // Timer Utilities
    ActionListener visitCycle = new ActionListener() {
        int selection = 0;
    
        @Override
        public void actionPerformed(ActionEvent evt) {
            int patientVisits = listModelPatientVisits.getSize();
            
            listPatientVisits.setSelectedIndex(selection);

            radarPane.removeAll();
            chartFoundation();

            selection++;
            if (selection == patientVisits) {
                selection = 0;
                myCycler.stop();
            }
        }

    };

    Timer myCycler = new Timer(500, visitCycle);
    
    /**
     * Creates new form radarFrame
     */
    public radarFrame() {
        this.setLocationRelativeTo(null);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPatientList = new javax.swing.JLabel();
        lblPatientVisits = new javax.swing.JLabel();
        lblRadarChart = new javax.swing.JLabel();
        lblInformation = new javax.swing.JLabel();
        btnCpax = new javax.swing.JButton();
        btnSofa = new javax.swing.JButton();
        btnMrc = new javax.swing.JButton();
        jScrollPanePatients = new javax.swing.JScrollPane();
        tableModelPOIDs = new javax.swing.JTable();
        jScrollPaneVisits = new javax.swing.JScrollPane();
        listPatientVisits = new javax.swing.JList<>();
        radarPane = new javax.swing.JLayeredPane();
        jPanelColourCpax = new javax.swing.JPanel();
        jPanelColourMrc = new javax.swing.JPanel();
        jPanelColourSofa = new javax.swing.JPanel();
        checkBoxCpax = new javax.swing.JCheckBox();
        checkBoxMrc = new javax.swing.JCheckBox();
        checkBoxSofa = new javax.swing.JCheckBox();
        btnAllFields = new javax.swing.JButton();
        checkBoxShowScores = new javax.swing.JCheckBox();
        jRadioAlternateView = new javax.swing.JRadioButton();
        jScrollPaneCpax = new javax.swing.JScrollPane();
        tableModelCpax = new javax.swing.JTable();
        jScrollPaneSofa = new javax.swing.JScrollPane();
        tableModelSofa = new javax.swing.JTable();
        jScrollPaneMrc = new javax.swing.JScrollPane();
        tableModelMrc = new javax.swing.JTable();
        jPanelColourCpax1 = new javax.swing.JPanel();
        jPanelColourMrc1 = new javax.swing.JPanel();
        jPanelColourSofa1 = new javax.swing.JPanel();
        lblPOID = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txtPoid = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        lblCpaxTotal = new javax.swing.JLabel();
        lblMrcTotal = new javax.swing.JLabel();
        lblSofaTotal = new javax.swing.JLabel();
        txtCpaxTotal = new javax.swing.JTextField();
        txtMrcTotal = new javax.swing.JTextField();
        txtSofaTotal = new javax.swing.JTextField();
        btnFilterIDs = new javax.swing.JButton();
        lblNoOfIDs = new javax.swing.JLabel();
        txtPatientCount = new javax.swing.JTextField();
        btnStartCycle = new javax.swing.JButton();
        btnStopCycle = new javax.swing.JButton();
        jSliderCycleSpeed = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        btnOpenFile = new javax.swing.JMenuItem();
        jMenuOther = new javax.swing.JMenu();
        jMenuPlotOptions = new javax.swing.JMenu();
        optionCoverZeros = new javax.swing.JCheckBoxMenuItem();
        optionCoverNulls = new javax.swing.JCheckBoxMenuItem();
        optionShowKey = new javax.swing.JCheckBoxMenuItem();
        optionShowPolygons = new javax.swing.JCheckBoxMenuItem();
        optionShowZero = new javax.swing.JCheckBoxMenuItem();
        optionLinkVisuals = new javax.swing.JCheckBoxMenuItem();
        jMenuChartOptions = new javax.swing.JMenu();
        optionShowLines = new javax.swing.JCheckBoxMenuItem();
        optionShowCircles = new javax.swing.JCheckBoxMenuItem();
        optionColourLines = new javax.swing.JCheckBoxMenuItem();
        jMenuResetColours = new javax.swing.JMenuItem();
        jMenuExport = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medical Chart");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        lblPatientList.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblPatientList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPatientList.setText("Patient List");
        lblPatientList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPatientVisits.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblPatientVisits.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPatientVisits.setText("Visits");
        lblPatientVisits.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblRadarChart.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblRadarChart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRadarChart.setText("Radar Chart");
        lblRadarChart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblInformation.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInformation.setText("Information & Data");
        lblInformation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnCpax.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnCpax.setText("Just CPAX");
        btnCpax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCpaxActionPerformed(evt);
            }
        });

        btnSofa.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSofa.setText("Just SOFA");
        btnSofa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSofaActionPerformed(evt);
            }
        });

        btnMrc.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnMrc.setText("Just MRC");
        btnMrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMrcActionPerformed(evt);
            }
        });

        tableModelPOIDs.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        tableModelPOIDs.setModel(tableModelPatientIDs);
        tableModelPOIDs.setTableHeader(null);
        tableModelPOIDs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableModelPOIDsMouseClicked(evt);
            }
        });
        jScrollPanePatients.setViewportView(tableModelPOIDs);

        listPatientVisits.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        listPatientVisits.setModel(listModelPatientVisits);
        listPatientVisits.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPatientVisitsMouseClicked(evt);
            }
        });
        listPatientVisits.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listPatientVisitsKeyReleased(evt);
            }
        });
        jScrollPaneVisits.setViewportView(listPatientVisits);

        radarPane.setBackground(new java.awt.Color(255, 255, 255));
        radarPane.setMaximumSize(new java.awt.Dimension(20, 2));
        radarPane.setOpaque(true);
        radarPane.setLayout(new javax.swing.OverlayLayout(radarPane));

        jPanelColourCpax.setBackground(new java.awt.Color(255, 0, 0));
        jPanelColourCpax.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanelColourCpax.setToolTipText("Change color");
        jPanelColourCpax.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelColourCpaxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelColourCpaxLayout = new javax.swing.GroupLayout(jPanelColourCpax);
        jPanelColourCpax.setLayout(jPanelColourCpaxLayout);
        jPanelColourCpaxLayout.setHorizontalGroup(
            jPanelColourCpaxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelColourCpaxLayout.setVerticalGroup(
            jPanelColourCpaxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jPanelColourMrc.setBackground(new java.awt.Color(0, 255, 0));
        jPanelColourMrc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanelColourMrc.setToolTipText("Change color");
        jPanelColourMrc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelColourMrcMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelColourMrcLayout = new javax.swing.GroupLayout(jPanelColourMrc);
        jPanelColourMrc.setLayout(jPanelColourMrcLayout);
        jPanelColourMrcLayout.setHorizontalGroup(
            jPanelColourMrcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelColourMrcLayout.setVerticalGroup(
            jPanelColourMrcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelColourSofa.setBackground(new java.awt.Color(0, 0, 255));
        jPanelColourSofa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanelColourSofa.setForeground(new java.awt.Color(51, 51, 51));
        jPanelColourSofa.setToolTipText("Change color");
        jPanelColourSofa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelColourSofaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelColourSofaLayout = new javax.swing.GroupLayout(jPanelColourSofa);
        jPanelColourSofa.setLayout(jPanelColourSofaLayout);
        jPanelColourSofaLayout.setHorizontalGroup(
            jPanelColourSofaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelColourSofaLayout.setVerticalGroup(
            jPanelColourSofaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        checkBoxCpax.setBackground(new java.awt.Color(204, 204, 204));
        checkBoxCpax.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        checkBoxCpax.setSelected(true);
        checkBoxCpax.setText("CPAX");
        checkBoxCpax.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCpaxItemStateChanged(evt);
            }
        });

        checkBoxMrc.setBackground(new java.awt.Color(204, 204, 204));
        checkBoxMrc.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        checkBoxMrc.setSelected(true);
        checkBoxMrc.setText("MRC");
        checkBoxMrc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxMrcItemStateChanged(evt);
            }
        });

        checkBoxSofa.setBackground(new java.awt.Color(204, 204, 204));
        checkBoxSofa.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        checkBoxSofa.setSelected(true);
        checkBoxSofa.setText("SOFA");
        checkBoxSofa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxSofaItemStateChanged(evt);
            }
        });

        btnAllFields.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAllFields.setText("All Fields");
        btnAllFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllFieldsActionPerformed(evt);
            }
        });

        checkBoxShowScores.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        checkBoxShowScores.setSelected(true);
        checkBoxShowScores.setText("Show Scores");
        checkBoxShowScores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxShowScoresItemStateChanged(evt);
            }
        });

        jRadioAlternateView.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jRadioAlternateView.setForeground(new java.awt.Color(51, 51, 51));
        jRadioAlternateView.setSelected(true);
        jRadioAlternateView.setText("Alternate View");
        jRadioAlternateView.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioAlternateViewItemStateChanged(evt);
            }
        });

        tableModelCpax.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableModelCpax.setModel(tableModelCpaxScores);
        tableModelCpax.setEnabled(false);
        jScrollPaneCpax.setViewportView(tableModelCpax);

        tableModelSofa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableModelSofa.setModel(tableModelSofaScores);
        tableModelSofa.setEnabled(false);
        tableModelSofa.setShowGrid(true);
        jScrollPaneSofa.setViewportView(tableModelSofa);

        tableModelMrc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableModelMrc.setModel(tableModelMrcScores);
        tableModelMrc.setEnabled(false);
        jScrollPaneMrc.setViewportView(tableModelMrc);

        jPanelColourCpax1.setBackground(new java.awt.Color(255, 0, 0));
        jPanelColourCpax1.setToolTipText("CPAX");

        javax.swing.GroupLayout jPanelColourCpax1Layout = new javax.swing.GroupLayout(jPanelColourCpax1);
        jPanelColourCpax1.setLayout(jPanelColourCpax1Layout);
        jPanelColourCpax1Layout.setHorizontalGroup(
            jPanelColourCpax1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 169, Short.MAX_VALUE)
        );
        jPanelColourCpax1Layout.setVerticalGroup(
            jPanelColourCpax1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanelColourMrc1.setBackground(new java.awt.Color(0, 255, 0));
        jPanelColourMrc1.setToolTipText("MRC");
        jPanelColourMrc1.setPreferredSize(new java.awt.Dimension(0, 20));

        javax.swing.GroupLayout jPanelColourMrc1Layout = new javax.swing.GroupLayout(jPanelColourMrc1);
        jPanelColourMrc1.setLayout(jPanelColourMrc1Layout);
        jPanelColourMrc1Layout.setHorizontalGroup(
            jPanelColourMrc1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
        jPanelColourMrc1Layout.setVerticalGroup(
            jPanelColourMrc1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanelColourSofa1.setBackground(new java.awt.Color(0, 0, 255));
        jPanelColourSofa1.setToolTipText("SOFA");

        javax.swing.GroupLayout jPanelColourSofa1Layout = new javax.swing.GroupLayout(jPanelColourSofa1);
        jPanelColourSofa1.setLayout(jPanelColourSofa1Layout);
        jPanelColourSofa1Layout.setHorizontalGroup(
            jPanelColourSofa1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );
        jPanelColourSofa1Layout.setVerticalGroup(
            jPanelColourSofa1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        lblPOID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPOID.setText("POID");

        lblFirstName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblFirstName.setText("First Name");

        lblLastName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblLastName.setText("Last Name");

        txtPoid.setEditable(false);
        txtPoid.setBackground(new java.awt.Color(255, 255, 255));
        txtPoid.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPoid.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        txtFirstName.setEditable(false);
        txtFirstName.setBackground(new java.awt.Color(255, 255, 255));
        txtFirstName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtFirstName.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        txtLastName.setEditable(false);
        txtLastName.setBackground(new java.awt.Color(255, 255, 255));
        txtLastName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtLastName.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        lblCpaxTotal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblCpaxTotal.setText("CPAX Total");

        lblMrcTotal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMrcTotal.setText("MRC Total");

        lblSofaTotal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblSofaTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSofaTotal.setText("SOFA Total");

        txtCpaxTotal.setEditable(false);
        txtCpaxTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtCpaxTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCpaxTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtMrcTotal.setEditable(false);
        txtMrcTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtMrcTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtMrcTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtSofaTotal.setEditable(false);
        txtSofaTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtSofaTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSofaTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnFilterIDs.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnFilterIDs.setText("Filter IDs (Beta)");
        btnFilterIDs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterIDsActionPerformed(evt);
            }
        });

        lblNoOfIDs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNoOfIDs.setText("No. of IDs");

        txtPatientCount.setEditable(false);
        txtPatientCount.setBackground(new java.awt.Color(255, 255, 255));
        txtPatientCount.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPatientCount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnStartCycle.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnStartCycle.setText("Present Visits");
        btnStartCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartCycleActionPerformed(evt);
            }
        });

        btnStopCycle.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnStopCycle.setText("Stop");
        btnStopCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopCycleActionPerformed(evt);
            }
        });

        jSliderCycleSpeed.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSliderCycleSpeed.setMajorTickSpacing(250);
        jSliderCycleSpeed.setMaximum(2000);
        jSliderCycleSpeed.setMinimum(500);
        jSliderCycleSpeed.setPaintLabels(true);
        jSliderCycleSpeed.setPaintTicks(true);
        jSliderCycleSpeed.setSnapToTicks(true);
        jSliderCycleSpeed.setToolTipText("Speed in Milliseconds");
        jSliderCycleSpeed.setValue(500);
        jSliderCycleSpeed.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSliderCycleSpeedPropertyChange(evt);
            }
        });

        jMenuFile.setText("File");

        btnOpenFile.setText("Open");
        btnOpenFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnOpenFileMousePressed(evt);
            }
        });
        jMenuFile.add(btnOpenFile);

        jMenuBar1.add(jMenuFile);

        jMenuOther.setText("Options");

        jMenuPlotOptions.setText("Plot");

        optionCoverZeros.setText("Cover zeros");
        optionCoverZeros.setToolTipText("Enable or disable gaps that are filled when a zero is present");
        optionCoverZeros.setActionCommand("");
        optionCoverZeros.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionCoverZerosItemStateChanged(evt);
            }
        });
        jMenuPlotOptions.add(optionCoverZeros);

        optionCoverNulls.setSelected(true);
        optionCoverNulls.setText("Cover missing values");
        optionCoverNulls.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionCoverNullsItemStateChanged(evt);
            }
        });
        jMenuPlotOptions.add(optionCoverNulls);

        optionShowKey.setText("Show line key");
        optionShowKey.setToolTipText("Enable or disable a key around the circle");
        optionShowKey.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionShowKeyItemStateChanged(evt);
            }
        });
        jMenuPlotOptions.add(optionShowKey);

        optionShowPolygons.setSelected(true);
        optionShowPolygons.setText("Show polygons");
        optionShowPolygons.setToolTipText("Enable or disable plot shapes");
        optionShowPolygons.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionShowPolygonsItemStateChanged(evt);
            }
        });
        jMenuPlotOptions.add(optionShowPolygons);

        optionShowZero.setSelected(true);
        optionShowZero.setText("Show Zeros");
        optionShowZero.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionShowZeroItemStateChanged(evt);
            }
        });
        optionShowZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionShowZeroActionPerformed(evt);
            }
        });
        jMenuPlotOptions.add(optionShowZero);

        optionLinkVisuals.setText("Link visuals");
        optionLinkVisuals.setToolTipText("Links the entire visualization together judging by the appropiate version of data that is missing");
        optionLinkVisuals.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionLinkVisualsItemStateChanged(evt);
            }
        });
        jMenuPlotOptions.add(optionLinkVisuals);

        jMenuOther.add(jMenuPlotOptions);

        jMenuChartOptions.setText("Chart");

        optionShowLines.setSelected(true);
        optionShowLines.setText("Show lines");
        optionShowLines.setToolTipText("Show lines on the chart");
        optionShowLines.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionShowLinesItemStateChanged(evt);
            }
        });
        jMenuChartOptions.add(optionShowLines);

        optionShowCircles.setSelected(true);
        optionShowCircles.setText("Show circles");
        optionShowCircles.setToolTipText("Show circles on the chart");
        optionShowCircles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionShowCirclesItemStateChanged(evt);
            }
        });
        jMenuChartOptions.add(optionShowCircles);

        optionColourLines.setText("Colour Lines");
        optionColourLines.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionColourLinesItemStateChanged(evt);
            }
        });
        jMenuChartOptions.add(optionColourLines);

        jMenuOther.add(jMenuChartOptions);

        jMenuResetColours.setText("Reset colours");
        jMenuResetColours.setToolTipText("Reset chart colors");
        jMenuResetColours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuResetColoursActionPerformed(evt);
            }
        });
        jMenuOther.add(jMenuResetColours);

        jMenuExport.setText("Export Chart");
        jMenuOther.add(jMenuExport);

        jMenuBar1.add(jMenuOther);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFilterIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(lblNoOfIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPatientCount, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPanePatients, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPatientList, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSliderCycleSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblPatientVisits, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(jScrollPaneVisits, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(btnStartCycle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStopCycle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanelColourCpax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCpax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(btnAllFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkBoxCpax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelColourMrc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkBoxShowScores, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(checkBoxMrc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMrc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioAlternateView, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(jPanelColourSofa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkBoxSofa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSofa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblRadarChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radarPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPaneSofa, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lblSofaTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSofaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanelColourSofa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCpaxTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCpaxTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelColourCpax1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPaneCpax, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPOID)
                                .addGap(18, 18, 18)
                                .addComponent(txtPoid, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFirstName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblLastName)
                                .addGap(11, 11, 11)
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneMrc, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblMrcTotal)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtMrcTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanelColourMrc1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRadarChart)
                        .addComponent(lblPatientVisits)
                        .addComponent(lblPatientList))
                    .addComponent(lblInformation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtPoid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPOID))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jPanelColourCpax1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblCpaxTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtCpaxTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPaneCpax, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jPanelColourSofa1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblSofaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtSofaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(7, 7, 7)
                                                .addComponent(jScrollPaneSofa, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jPanelColourMrc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(txtMrcTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblMrcTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPaneMrc, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(radarPane, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jPanelColourCpax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanelColourMrc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanelColourSofa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPaneVisits, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnStartCycle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderCycleSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnSofa, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnMrc, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnCpax, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxSofa)
                                    .addComponent(checkBoxMrc)
                                    .addComponent(checkBoxCpax, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jScrollPanePatients))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStopCycle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAllFields, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxShowScores, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioAlternateView, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPatientCount, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNoOfIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilterIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void optionCoverZerosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionCoverZerosItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionCoverZerosItemStateChanged

    private void listPatientVisitsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPatientVisitsMouseClicked
        chartFoundation();
    }//GEN-LAST:event_listPatientVisitsMouseClicked

    private void btnCpaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCpaxActionPerformed
        // Change to CPAX chart
        checkBoxCpax.setSelected(true);
        checkBoxMrc.setSelected(false);
        checkBoxSofa.setSelected(false);
    }//GEN-LAST:event_btnCpaxActionPerformed

    private void btnSofaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSofaActionPerformed
        // Change to SOFA chart
        checkBoxCpax.setSelected(false);
        checkBoxMrc.setSelected(false);
        checkBoxSofa.setSelected(true);
    }//GEN-LAST:event_btnSofaActionPerformed

    private void optionShowKeyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionShowKeyItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionShowKeyItemStateChanged

    private void checkBoxCpaxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCpaxItemStateChanged
        // Refresh the chart when plot selection changed
        chartRefresh();
    }//GEN-LAST:event_checkBoxCpaxItemStateChanged

    private void checkBoxMrcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxMrcItemStateChanged
        // Refresh the chart when plot selection changed
        chartRefresh();
    }//GEN-LAST:event_checkBoxMrcItemStateChanged

    private void checkBoxSofaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxSofaItemStateChanged
        // Refresh the chart when plot selection changed
        chartRefresh();
    }//GEN-LAST:event_checkBoxSofaItemStateChanged

    private void btnAllFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllFieldsActionPerformed
        // Change chart to all fields
        checkBoxCpax.setSelected(true);
        checkBoxMrc.setSelected(true);
        checkBoxSofa.setSelected(true);
    }//GEN-LAST:event_btnAllFieldsActionPerformed

    private void btnMrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMrcActionPerformed
        // Change to MRC chart
        checkBoxCpax.setSelected(false);
        checkBoxMrc.setSelected(true);
        checkBoxSofa.setSelected(false);
    }//GEN-LAST:event_btnMrcActionPerformed

    private void optionShowLinesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionShowLinesItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionShowLinesItemStateChanged

    private void optionShowPolygonsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionShowPolygonsItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionShowPolygonsItemStateChanged

    private void jMenuResetColoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuResetColoursActionPerformed
        // Change plot colors back to their original values
        colourCpax = Color.RED;
        jPanelColourCpax.setBackground(colourCpax);
        jPanelColourCpax1.setBackground(colourCpax);
        colourMrc = Color.GREEN;
        jPanelColourMrc.setBackground(colourMrc);
        jPanelColourMrc1.setBackground(colourMrc);
        colourSofa = Color.BLUE;
        jPanelColourSofa.setBackground(colourSofa);
        jPanelColourSofa1.setBackground(colourSofa);
        chartRefresh();
    }//GEN-LAST:event_jMenuResetColoursActionPerformed

    private void jPanelColourCpaxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelColourCpaxMouseClicked
        // Color selection for CPAX
        colourCpax = selectColorRoutine(colourCpax);
        jPanelColourCpax.setBackground(colourCpax);
        jPanelColourCpax1.setBackground(colourCpax);
        chartRefresh();
    }//GEN-LAST:event_jPanelColourCpaxMouseClicked

    private void jPanelColourMrcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelColourMrcMouseClicked
        colourMrc = selectColorRoutine(colourMrc);
        jPanelColourMrc.setBackground(colourMrc);
        jPanelColourMrc1.setBackground(colourMrc);
        chartRefresh();
    }//GEN-LAST:event_jPanelColourMrcMouseClicked

    private void jPanelColourSofaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelColourSofaMouseClicked
        colourSofa = selectColorRoutine(colourSofa);
        jPanelColourSofa.setBackground(colourSofa);
        jPanelColourSofa1.setBackground(colourSofa);
        chartRefresh();
    }//GEN-LAST:event_jPanelColourSofaMouseClicked

    private void optionShowCirclesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionShowCirclesItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionShowCirclesItemStateChanged

    private void jRadioAlternateViewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioAlternateViewItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_jRadioAlternateViewItemStateChanged

    private void optionColourLinesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionColourLinesItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionColourLinesItemStateChanged

    private void optionCoverNullsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionCoverNullsItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionCoverNullsItemStateChanged

    private void optionLinkVisualsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionLinkVisualsItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_optionLinkVisualsItemStateChanged

    private void tableModelPOIDsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableModelPOIDsMouseClicked
        // Clear previous information
        listModelPatientVisits.removeAllElements();
        selectedPatient = tableModelPOIDs.getValueAt(
                tableModelPOIDs.getSelectedRow(),
                tableModelPOIDs.getSelectedColumn())
                .toString();

        // Removes scores
        for (int i = tableModelMrcScores.getRowCount(); i > 0; i--) {
            tableModelMrcScores.removeRow(i - 1);
        }
        for (int i = tableModelCpaxScores.getRowCount(); i > 0; i--) {
            tableModelCpaxScores.removeRow(i - 1);
        }
        for (int i = tableModelSofaScores.getRowCount(); i > 0; i--) {
            tableModelSofaScores.removeRow(i - 1);
        }

        // Removes radar chart
        if (radarPane.getComponentCount() > 0) {
            radarPane.removeAll();
            this.revalidate();
            this.repaint();
        }

        lblRadarChart.setText("Radar Chart");

        // Add dates of admissions when clicking on a patient ID
        for (int i = 0; i < arrayPatients.length; i++) {
            if (arrayPatients[i].getPoid().equals(selectedPatient)) {
                listModelPatientVisits.addElement(arrayPatients[i].getAdmission());
            }
        }

        System.out.println("Before Date Filter: " + listModelPatientVisits.getSize());

        int counter = 0;
        for (int i = 0; i < listModelPatientVisits.getSize(); i++) {
            String patientVisit = listModelPatientVisits.getElementAt(i).toString();
            for (int ii = i + 1; ii < listModelPatientVisits.getSize(); ii++) {
                if (listModelPatientVisits.get(ii).toString().equals(patientVisit)) {
                    counter++;
                    if (counter == 1) {
                        listModelPatientVisits.remove(ii);
                        counter = 0;
                    }
                }
            }
        }

        System.out.println("After Date Filter: " + listModelPatientVisits.getSize() + "\n_");

        for (int i = 0; i < tableModelPOIDs.getRowCount(); i++) {

            if (tableModelPOIDs.getValueAt(i, tableModelPOIDs.getSelectedColumn()).toString().equals(selectedPatient)) {
                setPatientOverview(i);
                txtCpaxTotal.setText("");
                txtMrcTotal.setText("");
                txtSofaTotal.setText("");
            }

        }

    }//GEN-LAST:event_tableModelPOIDsMouseClicked

    private void listPatientVisitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listPatientVisitsKeyReleased
        // TODO add your handling code here:
        chartFoundation();
    }//GEN-LAST:event_listPatientVisitsKeyReleased

    private void btnOpenFileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenFileMousePressed
        // TODO add your handling code here:
        if (evt.getSource() == btnOpenFile) {

            JFileChooser fileChooser = new JFileChooser();

            // Sets the opening directory to the programs datasets file
            fileChooser.setCurrentDirectory(new File("./datasets"));

            int response = fileChooser.showOpenDialog(null);

            // If something is chosen, reload the data in the applicaiton
            if (response == JFileChooser.APPROVE_OPTION) {
                File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                dataPath = file.toString();
                dataCount = dataReader.Main.countData(dataPath);
                arrayPatients = dataReader.Main.loadData(dataPath, dataCount);
                dataLoad(false);
            }
        }
    }//GEN-LAST:event_btnOpenFileMousePressed

    private void btnFilterIDsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterIDsActionPerformed
        // TODO add your handling code here:
        dataLoad(true);
    }//GEN-LAST:event_btnFilterIDsActionPerformed

    private void checkBoxShowScoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxShowScoresItemStateChanged
        // TODO add your handling code here:
        chartRefresh();
    }//GEN-LAST:event_checkBoxShowScoresItemStateChanged

    private void optionShowZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionShowZeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optionShowZeroActionPerformed

    private void optionShowZeroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionShowZeroItemStateChanged
        // TODO add your handling code here:
        chartRefresh();
    }//GEN-LAST:event_optionShowZeroItemStateChanged

    private void btnStartCycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartCycleActionPerformed
        // Starts the showcase function 
        myCycler.start();
    }//GEN-LAST:event_btnStartCycleActionPerformed

    private void btnStopCycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopCycleActionPerformed
        // Stops the showcase function
        myCycler.stop();
    }//GEN-LAST:event_btnStopCycleActionPerformed

    private void jSliderCycleSpeedPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSliderCycleSpeedPropertyChange
        // TODO add your handling code here:
        myCycler.setDelay(jSliderCycleSpeed.getValue());
    }//GEN-LAST:event_jSliderCycleSpeedPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new radarFrame().setVisible(true);
            }
        });
    }

    /*
     *  Loads data for the lists
     */
    public void dataLoad(boolean filterPatients) {

        if (tableModelPOIDs.getRowCount() > 0) {
            tableModelPatientIDs.setRowCount(0);
        }

        for (int i = 0; i < arrayPatients.length; i++) {
            tableModelPatientIDs.addRow(new Object[]{arrayPatients[i].getPoid()});
        }

        int counter = 0;

        if (filterPatients == true) {
            for (int i = 0; i < tableModelPatientIDs.getRowCount(); i++) {
                String patientID = tableModelPatientIDs.getValueAt(i, 0).toString();
                for (int ii = 0; ii < tableModelPatientIDs.getRowCount(); ii++) {
                    if (tableModelPatientIDs.getValueAt(ii, 0).toString().equals(patientID)) {
                        counter++;
                        if (counter == 2) {
                            tableModelPatientIDs.removeRow(ii);
                            counter = 0;
                        }
                    }
                }
            }
        }

        txtPatientCount.setText("" + tableModelPatientIDs.getRowCount());
    }

    /*
     *  Used to build the chart, checks which boxes are checked and builds
     *  the appropiate charts based on the selection...
     */
    public void chartBuilder(int index, Color colCpax, Color colMrc, Color colSofa) {

        // Check to see which version of the chart is being made
        if (jRadioAlternateView.isSelected() == false) {

            /*
                Plotting Section:
                Plots the enabled charts first before the chart itself
             */
            if (checkBoxCpax.isSelected() == true) {
                int scores[] = arrayPatients[index].getCpax().getScores();

                Point[] plotPoints = new Point[scores.length];
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "cpax", colourCpax);
                    plotPoints[i] = newPoint;
                }

                int nPoints = scores.length;
                Plot cpaxPlot = new Plot(colCpax, nPoints, plotPoints,
                        optionCoverZeros.getState(),
                        checkBoxShowScores.isSelected(),
                        optionShowKey.getState(),
                        optionShowPolygons.getState(),
                        optionCoverNulls.getState(),
                        optionLinkVisuals.getState(),
                        optionShowZero.getState());

                radarPane.add(cpaxPlot);
            }

            if (checkBoxMrc.isSelected() == true) {
                int scores[] = arrayPatients[index].getMrc().getScores();

                Point[] plotPoints = new Point[scores.length];
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "mrc", colourMrc);
                    plotPoints[i] = newPoint;
                }

                int nPoints = scores.length;
                Plot mrcPlot = new Plot(colMrc, nPoints, plotPoints,
                        optionCoverZeros.getState(),
                        checkBoxShowScores.isSelected(),
                        optionShowKey.getState(),
                        optionShowPolygons.getState(),
                        optionCoverNulls.getState(),
                        optionLinkVisuals.getState(),
                        optionShowZero.getState());

                radarPane.add(mrcPlot);
            }

            if (checkBoxSofa.isSelected() == true) {
                int scores[] = arrayPatients[index].getSofa().getScores();

                Point[] plotPoints = new Point[scores.length];
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "sofa", colourSofa);
                    plotPoints[i] = newPoint;
                }

                int nPoints = scores.length;
                Plot sofaPlot = new Plot(colSofa, nPoints, plotPoints,
                        optionCoverZeros.getState(),
                        checkBoxShowScores.isSelected(),
                        optionShowKey.getState(),
                        optionShowPolygons.getState(),
                        optionCoverNulls.getState(),
                        optionLinkVisuals.getState(),
                        optionShowZero.getState());

                radarPane.add(sofaPlot);
            }

            /*
                Charting Section:
                Creates the shapes that will be put BEHIND the plot
             */
            if (checkBoxCpax.isSelected() == true) {
                int scores[] = arrayPatients[index].getCpax().getScores();
                int slices = scores.length;

                Point[] plotPoints = new Point[scores.length];
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "cpax", colourCpax);
                    plotPoints[i] = newPoint;
                }

                Chart CpaxChart = new Chart(slices, plotPoints,
                        optionShowKey.getState(),
                        optionShowLines.getState(),
                        optionShowCircles.getState(),
                        optionColourLines.getState());

                radarPane.add(CpaxChart);

            }

            if (checkBoxMrc.isSelected() == true) {
                int scores[] = arrayPatients[index].getMrc().getScores();
                int slices = scores.length;

                Point[] plotPoints = new Point[scores.length];
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "mrc", colourMrc);
                    plotPoints[i] = newPoint;
                }

                Chart MrcChart = new Chart(slices, plotPoints,
                        optionShowKey.getState(),
                        optionShowLines.getState(),
                        optionShowCircles.getState(),
                        optionColourLines.getState());

                radarPane.add(MrcChart);
            }

            if (checkBoxSofa.isSelected() == true) {
                int scores[] = arrayPatients[index].getSofa().getScores();
                int slices = scores.length;

                Point[] plotPoints = new Point[scores.length];
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "sofa", colourSofa);
                    plotPoints[i] = newPoint;
                }

                Chart SofaChart = new Chart(slices, plotPoints,
                        optionShowKey.getState(),
                        optionShowLines.getState(),
                        optionShowCircles.getState(),
                        optionColourLines.getState());

                radarPane.add(SofaChart);
            }

        } else {

            int cpaxLength = 0;
            int mrcLength = 0;
            int sofaLength = 0;

            if (checkBoxCpax.isSelected() == true) {
                cpaxLength = arrayPatients[index].getCpax().getScores().length;
            }

            if (checkBoxMrc.isSelected() == true) {
                mrcLength = arrayPatients[index].getMrc().getScores().length;
            }

            if (checkBoxSofa.isSelected() == true) {
                sofaLength = arrayPatients[index].getSofa().getScores().length;
            }

            int totalLength = cpaxLength + mrcLength + sofaLength;
            Point[] chartScores = new Point[totalLength];

            // Use this 'pos' variable as a position for where the procedure
            // puts the next score in the array...
            int pos = 0;

            if (checkBoxCpax.isSelected() == true) {
                int scores[] = arrayPatients[index].getCpax().getScores();
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "cpax", colourCpax);
                    chartScores[pos] = newPoint;
                    pos++;
                }
            }

            if (checkBoxMrc.isSelected() == true) {
                int scores[] = arrayPatients[index].getMrc().getScores();
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "mrc", colourMrc);
                    chartScores[pos] = newPoint;
                    pos++;
                }
            }

            if (checkBoxSofa.isSelected() == true) {
                int scores[] = arrayPatients[index].getSofa().getScores();
                for (int i = 0; i < scores.length; i++) {
                    Point newPoint = new Point(scores[i], "sofa", colourSofa);
                    chartScores[pos] = newPoint;
                    pos++;
                }
            }

            int slices = chartScores.length;
            Chart totalChart = new Chart(slices, chartScores,
                    optionShowKey.getState(),
                    optionShowLines.getState(),
                    optionShowCircles.getState(),
                    optionColourLines.getState());

            Plot bigPlot = new Plot(Color.BLACK, slices, chartScores,
                    optionCoverZeros.getState(),
                    checkBoxShowScores.isSelected(),
                    optionShowKey.getState(),
                    optionShowPolygons.getState(),
                    optionCoverNulls.getState(),
                    optionLinkVisuals.getState(),
                    optionShowZero.getState());

            radarPane.add(bigPlot);
            radarPane.add(totalChart);

        }
    }

    /*
     *  Chart refresh procedure that is commonly used for when something the user
     *  has clicked should change particular parts of the chart
     */
    public void chartRefresh() {
        // Find the right patient by looping for the selected value
        for (int i = 0; i < arrayPatients.length; i++) {
            if (arrayPatients[i].getPoid().equals(selectedPatient)) {
                if (arrayPatients[i].getAdmission().equals(selectedAdmission)) {
                    radarPane.removeAll();
                    scoreBuilder();
                    chartBuilder(i, colourCpax, colourMrc, colourSofa);
                    this.revalidate();
                    this.repaint();

                    break;
                }
            }
        }
    }

    /*
     *   Procedure that is to select a color for the chart plot 
     */
    public Color selectColorRoutine(Color previousColor) {
        Color color = JColorChooser.showDialog(this, "Select a new color", colourCpax);

        // Return to a black color if null
        if (color == null) {
            color = previousColor;
        }

        return color;
    }

    /*
     *   Sets up the tables of data to go with the chart... 
     *   There must be a way to shorten this?
     */
    public void setDataTables(int patientIndex) {

        // Empty table of information before showing new relevant information
        if (tableModelPatientOverview.getRowCount() == 1) {
            tableModelPatientOverview.removeRow(0);
            tableModelPatientOverview.addRow(arrayPatients[patientIndex].getOverviewRow());
        } else {
            tableModelPatientOverview.addRow(arrayPatients[patientIndex].getOverviewRow());
        }

        String[] items = {};
        int[] intScores = {};

        if (tablesAreFull == false) {

            // Go through the tables, replace the missing value ID with a word...
            items = arrayPatients[patientIndex].getCpax().getItems();
            String[] strScoresCpax = arrayPatients[patientIndex].getCpax().getScoresStrings();
            for (int ii = 0; ii < items.length; ii++) {
                if (strScoresCpax[ii].contains(missingData)) {
                    strScoresCpax[ii] = "MISSING";
                }
                tableModelCpaxScores.addRow(new Object[]{(ii + 1), items[ii], strScoresCpax[ii]});
            }

            items = arrayPatients[patientIndex].getMrc().getItems();
            String[] strScoresMrc = arrayPatients[patientIndex].getMrc().getScoresStrings();
            for (int ii = 0; ii < items.length; ii++) {
                if (strScoresMrc[ii].contains(missingData)) {
                    strScoresMrc[ii] = "MISSING";
                }
                tableModelMrcScores.addRow(new Object[]{(ii + 1), items[ii], strScoresMrc[ii]});
            }

            items = arrayPatients[patientIndex].getSofa().getItems();
            String[] strScoreSofa = arrayPatients[patientIndex].getSofa().getScoresStrings();
            for (int ii = 0; ii < items.length; ii++) {
                if (strScoreSofa[ii].contains(missingData)) {
                    strScoreSofa[ii] = "MISSING";
                }
                tableModelSofaScores.addRow(new Object[]{(ii + 1), items[ii], strScoreSofa[ii]});
            }

            tablesAreFull = true;

        } else {

            for (int ii = (tableModelCpaxScores.getRowCount() - 1); ii > 0; ii--) {
                tableModelCpaxScores.removeRow(ii);
                if (tableModelCpaxScores.getRowCount() == 1) {
                    tableModelCpaxScores.removeRow(0);
                }
            }

            for (int ii = (tableModelMrcScores.getRowCount() - 1); ii > 0; ii--) {
                tableModelMrcScores.removeRow(ii);
                if (tableModelMrcScores.getRowCount() == 1) {
                    tableModelMrcScores.removeRow(0);
                }
            }

            for (int ii = (tableModelSofaScores.getRowCount() - 1); ii > 0; ii--) {
                tableModelSofaScores.removeRow(ii);
                if (tableModelSofaScores.getRowCount() == 1) {
                    tableModelSofaScores.removeRow(0);
                }
            }

            tablesAreFull = false;
            setDataTables(patientIndex);

        }
    }

    public void setPatientOverview(int patientIndex) {
        txtPoid.setText(arrayPatients[patientIndex].getPoid());
        txtFirstName.setText(arrayPatients[patientIndex].getFirstName());
        txtLastName.setText(arrayPatients[patientIndex].getLastName());
    }

    public void chartFoundation() {
        selectedAdmission = listPatientVisits.getSelectedValue();

        // Checks validity of admission and ID selected, shows chart
        for (int i = 0; i < arrayPatients.length; i++) {
            if (arrayPatients[i].getPoid().equals(selectedPatient)) {
                if (arrayPatients[i].getAdmission().equals(selectedAdmission)) {
                    radarPane.removeAll();
                    scoreBuilder();
                    chartBuilder(i, colourCpax, colourMrc, colourSofa);
                    this.revalidate();
                    this.repaint();

                    setDataTables(i);
                    lblRadarChart.setText("Radar Chart: " + selectedAdmission);

                    // Missing Cpax totals check
                    if (arrayPatients[i].getCpax().getTotal() == Integer.parseInt(missingData)) {
                        arrayPatients[i].getCpax().setTotal(0);
                    }

                    // Missing Mrc totals check
                    if (arrayPatients[i].getMrc().getTotal() == Integer.parseInt(missingData)) {
                        arrayPatients[i].getMrc().setTotal(0);
                    }

                    // Missing Sofa totals check
                    if (arrayPatients[i].getSofa().getTotal() == Integer.parseInt(missingData)) {
                        arrayPatients[i].getSofa().setTotal(0);
                    }

                    txtCpaxTotal.setText("" + arrayPatients[i].getCpax().getTotal());
                    txtMrcTotal.setText("" + arrayPatients[i].getMrc().getTotal());
                    txtSofaTotal.setText("" + arrayPatients[i].getSofa().getTotal());

                    break;
                }
            }
        }
    }

    public void scoreBuilder() {

        int total = 0;

        for (int i = 0; i < arrayPatients.length; i++) {
            if (arrayPatients[i].getPoid().equals(selectedPatient)) {
                if (arrayPatients[i].getAdmission().equals(selectedAdmission)) {

                    if (checkBoxCpax.isSelected() == true) {
                        if (arrayPatients[i].getCpax().getTotal() == Integer.parseInt(missingData)) {
                            total = total + 0;
                        } else {
                            total = total + arrayPatients[i].getCpax().getTotal();
                        }
                    }
                    if (checkBoxMrc.isSelected() == true) {
                        if (arrayPatients[i].getMrc().getTotal() == Integer.parseInt(missingData)) {
                            total = total + 0;
                        } else {
                            total = total + arrayPatients[i].getMrc().getTotal();
                        }
                    }
                    if (checkBoxSofa.isSelected() == true) {
                        if (arrayPatients[i].getMrc().getTotal() == Integer.parseInt(missingData)) {
                            total = total + 0;
                        } else {
                            total = total + arrayPatients[i].getSofa().getTotal();
                        }
                    }

                    break;
                }
            }
        }

        Score tot = new Score(total);
        radarPane.add(tot);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllFields;
    private javax.swing.JButton btnCpax;
    private javax.swing.JButton btnFilterIDs;
    private javax.swing.JButton btnMrc;
    private javax.swing.JMenuItem btnOpenFile;
    private javax.swing.JButton btnSofa;
    private javax.swing.JButton btnStartCycle;
    private javax.swing.JButton btnStopCycle;
    private javax.swing.JCheckBox checkBoxCpax;
    private javax.swing.JCheckBox checkBoxMrc;
    private javax.swing.JCheckBox checkBoxShowScores;
    private javax.swing.JCheckBox checkBoxSofa;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuChartOptions;
    private javax.swing.JMenuItem jMenuExport;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuOther;
    private javax.swing.JMenu jMenuPlotOptions;
    private javax.swing.JMenuItem jMenuResetColours;
    private javax.swing.JPanel jPanelColourCpax;
    private javax.swing.JPanel jPanelColourCpax1;
    private javax.swing.JPanel jPanelColourMrc;
    private javax.swing.JPanel jPanelColourMrc1;
    private javax.swing.JPanel jPanelColourSofa;
    private javax.swing.JPanel jPanelColourSofa1;
    private javax.swing.JRadioButton jRadioAlternateView;
    private javax.swing.JScrollPane jScrollPaneCpax;
    private javax.swing.JScrollPane jScrollPaneMrc;
    private javax.swing.JScrollPane jScrollPanePatients;
    private javax.swing.JScrollPane jScrollPaneSofa;
    private javax.swing.JScrollPane jScrollPaneVisits;
    private javax.swing.JSlider jSliderCycleSpeed;
    private javax.swing.JLabel lblCpaxTotal;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblInformation;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMrcTotal;
    private javax.swing.JLabel lblNoOfIDs;
    private javax.swing.JLabel lblPOID;
    private javax.swing.JLabel lblPatientList;
    private javax.swing.JLabel lblPatientVisits;
    private javax.swing.JLabel lblRadarChart;
    private javax.swing.JLabel lblSofaTotal;
    private javax.swing.JList<String> listPatientVisits;
    private javax.swing.JCheckBoxMenuItem optionColourLines;
    private javax.swing.JCheckBoxMenuItem optionCoverNulls;
    private javax.swing.JCheckBoxMenuItem optionCoverZeros;
    private javax.swing.JCheckBoxMenuItem optionLinkVisuals;
    private javax.swing.JCheckBoxMenuItem optionShowCircles;
    private javax.swing.JCheckBoxMenuItem optionShowKey;
    private javax.swing.JCheckBoxMenuItem optionShowLines;
    private javax.swing.JCheckBoxMenuItem optionShowPolygons;
    private javax.swing.JCheckBoxMenuItem optionShowZero;
    private javax.swing.JLayeredPane radarPane;
    private javax.swing.JTable tableModelCpax;
    private javax.swing.JTable tableModelMrc;
    private javax.swing.JTable tableModelPOIDs;
    private javax.swing.JTable tableModelSofa;
    private javax.swing.JTextField txtCpaxTotal;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMrcTotal;
    private javax.swing.JTextField txtPatientCount;
    private javax.swing.JTextField txtPoid;
    private javax.swing.JTextField txtSofaTotal;
    // End of variables declaration//GEN-END:variables
}
