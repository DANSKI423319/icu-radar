/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import models.*;
import radar.Chart;

/**
 *
 * @author clair
 */
public class radarFrame extends javax.swing.JFrame {

    public boolean validSelection = false;
    public int currentSelection = 0;
    public Patient[] patientArr = new Patient[3];
    public DefaultListModel patientListModel = new DefaultListModel();
    public DefaultListModel patientVisitModel = new DefaultListModel();
    public DefaultTableModel tableModel = new DefaultTableModel(new String[]{"POID", "First Name", "Last Name", "CPAX Total", "MRC Total", "SOFA Total"}, 0);

    /**
     * Creates new form radarFrame
     */
    public radarFrame() {
        this.setLocationRelativeTo(null);
        createData();
        loadList();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radarPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        lblPatientList = new javax.swing.JLabel();
        lblRadarChart = new javax.swing.JLabel();
        btnCpax = new javax.swing.JButton();
        btnSofa = new javax.swing.JButton();
        btnMrc = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientVisitList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuOther = new javax.swing.JMenu();
        replaceZeroCB = new javax.swing.JCheckBoxMenuItem();
        drawScoresCB = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medical Chart");
        setResizable(false);

        radarPanel.setBackground(new java.awt.Color(204, 204, 204));

        patientList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientList.setModel(patientListModel);
        patientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientList);

        patientTable.setModel(tableModel);
        patientTable.setEnabled(false);
        jScrollPane2.setViewportView(patientTable);

        lblPatientList.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblPatientList.setText("Patient List");

        lblRadarChart.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblRadarChart.setText("Radar Chart");

        btnCpax.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCpax.setText("CPAX");
        btnCpax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCpaxActionPerformed(evt);
            }
        });

        btnSofa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSofa.setText("SOFA");
        btnSofa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSofaActionPerformed(evt);
            }
        });

        btnMrc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnMrc.setText("MRC");
        btnMrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMrcActionPerformed(evt);
            }
        });

        patientVisitList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientVisitList.setModel(patientVisitModel);
        patientVisitList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientVisitListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(patientVisitList);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Patient Visits");

        jMenuFile.setText("File");
        jMenuBar1.add(jMenuFile);

        jMenuOther.setText("Options");

        replaceZeroCB.setSelected(true);
        replaceZeroCB.setText("Replace zero values");
        replaceZeroCB.setActionCommand("");
        replaceZeroCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                replaceZeroCBItemStateChanged(evt);
            }
        });
        jMenuOther.add(replaceZeroCB);

        drawScoresCB.setSelected(true);
        drawScoresCB.setText("Draw scores");
        drawScoresCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                drawScoresCBItemStateChanged(evt);
            }
        });
        jMenuOther.add(drawScoresCB);

        jMenuBar1.add(jMenuOther);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientList)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblRadarChart)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCpax, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMrc, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSofa, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(radarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientList)
                    .addComponent(lblRadarChart)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnMrc, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(btnCpax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSofa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void patientListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListMouseClicked
        validSelection = false;
        
        // Clear list and chart
        patientVisitModel.removeAllElements();
        radarPanel.removeAll();

        // Add dates of admissions when clicking on a patient ID
        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(patientList.getSelectedValue())) {
                patientVisitModel.addElement(patientArr[i].getAdmission());
            }
        }

    }//GEN-LAST:event_patientListMouseClicked

    private void replaceZeroCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_replaceZeroCBItemStateChanged

        // Refresh the chart when option changed
        chartRefresh();

    }//GEN-LAST:event_replaceZeroCBItemStateChanged

    private void drawScoresCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_drawScoresCBItemStateChanged

        // Refresh the chart when option changed
        chartRefresh();

    }//GEN-LAST:event_drawScoresCBItemStateChanged

    private void patientVisitListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientVisitListMouseClicked

        validSelection = true;
        String selectedID = patientList.getSelectedValue();
        String selectedVisit = patientVisitList.getSelectedValue();

        // Checks validity of admission and ID selected, shows chart
        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(selectedID)) {
                if (patientArr[i].getAdmission().equals(selectedVisit)) {

                    radarPanel.removeAll();

                    radarPanel.add(chartBuilder(i, 1));
                    this.revalidate();
                    this.repaint();

                    // Empty table of information before showing new relevant information
                    if (tableModel.getRowCount() == 1) {
                        tableModel.removeRow(0);
                        tableModel.addRow(patientArr[i].getDataRow());
                    } else {
                        tableModel.addRow(patientArr[i].getDataRow());
                    }

                    break;
                }
            }
        }

    }//GEN-LAST:event_patientVisitListMouseClicked

    private void btnCpaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCpaxActionPerformed
        // TODO add your handling code here:
        if (validSelection == true) {
            currentSelection = 1;
            chartSetup();
        }
    }//GEN-LAST:event_btnCpaxActionPerformed

    private void btnMrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMrcActionPerformed
        // TODO add your handling code here:
        if (validSelection == true) {
            currentSelection = 2;
            chartSetup();
        }
    }//GEN-LAST:event_btnMrcActionPerformed

    private void btnSofaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSofaActionPerformed
        // TODO add your handling code here:
        if (validSelection == true) {
            currentSelection = 3;
            chartSetup();
        }
    }//GEN-LAST:event_btnSofaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new radarFrame().setVisible(true);
            }
        });
    }

    public void createData() {
        Cpax cpax = new Cpax(5, 5, 2, 2, 4, 2, 4, 3, 0, 1, 28);
        Mrc mrc = new Mrc(4, 5, 3, 3, 1, 3, 1, 4, 2, 5, 4, 2, 1, 3, 5, 3, 5, 4, 5, 4, 2, 5, 5, 3, 82);
        Sofa sofa = new Sofa(4, 4, 3, 0, 1, 2, 14);
        Patient John = new Patient("1234", "John", "Smith", "5 Transfers with assistance", "22/01/2015", cpax, mrc, sofa);
        patientArr[0] = John;

        cpax = new Cpax(5, 5, 2, 2, 4, 2, 2, 2, 1, 0, 25);
        mrc = new Mrc(5, 5, 3, 0, 0, 5, 0, 4, 0, 5, 0, 4, 5, 0, 5, 0, 5, 0, 5, 0, 0, 5, 5, 0, 65);
        sofa = new Sofa(1, 2, 3, 0, 5, 4, 15);
        Patient Jane = new Patient("2345", "Jane", "Doe", "10 Transfers with assistance", "22/01/2015", cpax, mrc, sofa);
        patientArr[1] = Jane;

        cpax = new Cpax(4, 4, 1, 1, 3, 1, 1, 2, 0, 0, 33);
        mrc = new Mrc(3, 4, 2, 2, 0, 2, 0, 3, 1, 4, 3, 1, 0, 2, 4, 2, 4, 3, 4, 3, 1, 4, 4, 2, 58);
        sofa = new Sofa(3, 3, 2, 0, 0, 2, 10);
        John = new Patient("1234", "John", "Smith", "5 Transfers with assistance", "23/01/2015", cpax, mrc, sofa);
        patientArr[2] = John;
    }

    public void loadList() {

        int counter = 0;

        for (int i = 0; i < patientArr.length; i++) {
            patientListModel.addElement(patientArr[i].getPoid());
        }

        for (int i = 0; i < patientListModel.getSize(); i++) {
            String patientID = patientListModel.getElementAt(i).toString();
            for (int ii = 0; ii < patientListModel.getSize(); ii++) {
                if (patientListModel.get(ii).toString() == patientID) {

                    counter++;

                    if (counter > 1) {
                        patientListModel.removeElementAt(ii);
                        counter = 0;
                    }
                }
            }
        }
    }

    public Chart chartBuilder(int index, int chartType) {

        int scores[] = {};

        if (chartType == 1) {
            scores = patientArr[index].getCpax().getScores();
        } else if (chartType == 2) {
            scores = patientArr[index].getMrc().getScores();
        } else if (chartType == 3) {
            scores = patientArr[index].getSofa().getScores();
        } else {
            System.out.println("Unexpected slection");
        }

        int slices = scores.length;
        int size = 428;

        // Build chart, check for changed options
        Chart chart = new Chart(slices, scores, size, replaceZeroCB.getState(), drawScoresCB.getState());

        return chart;

    }

    public void chartRefresh() {
        radarPanel.removeAll();
        String selected = patientList.getSelectedValue();

        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(selected)) {

                radarPanel.add(chartBuilder(i, currentSelection));
                this.revalidate();
                this.repaint();

                if (tableModel.getRowCount() == 1) {
                    tableModel.removeRow(0);
                    tableModel.addRow(patientArr[i].getDataRow());
                } else {
                    tableModel.addRow(patientArr[i].getDataRow());
                }

                break;
            }
        }
    }

    public void chartSetup() {

        String selectedID = patientList.getSelectedValue();
        String selectedVisit = patientVisitList.getSelectedValue();

        // Checks validity of admission and ID selected, shows chart
        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(selectedID)) {
                if (patientArr[i].getAdmission().equals(selectedVisit)) {

                    radarPanel.removeAll();

                    radarPanel.add(chartBuilder(i, currentSelection));
                    this.revalidate();
                    this.repaint();

                    // Empty table of information before showing new relevant information
                    if (tableModel.getRowCount() == 1) {
                        tableModel.removeRow(0);
                        tableModel.addRow(patientArr[i].getDataRow());
                    } else {
                        tableModel.addRow(patientArr[i].getDataRow());
                    }

                    break;
                }
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCpax;
    private javax.swing.JButton btnMrc;
    private javax.swing.JButton btnSofa;
    private javax.swing.JCheckBoxMenuItem drawScoresCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuOther;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblPatientList;
    private javax.swing.JLabel lblRadarChart;
    private javax.swing.JList<String> patientList;
    public javax.swing.JTable patientTable;
    private javax.swing.JList<String> patientVisitList;
    public javax.swing.JPanel radarPanel;
    private javax.swing.JCheckBoxMenuItem replaceZeroCB;
    // End of variables declaration//GEN-END:variables
}
