/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.Arrays;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import models.*;
import radar.Chart;

/**
 *
 * @author clair
 */
public class radarFrame extends javax.swing.JFrame {

    public boolean validSelection = false;
    public boolean tableIsFull = false;

    public int currentSelection = 1;
    public Patient[] patientArr = new Patient[3];

    public DefaultListModel patientListModel = new DefaultListModel();
    public DefaultListModel patientVisitModel = new DefaultListModel();

    public DefaultTableModel tablePatientOverview = new DefaultTableModel(new String[]{"POID", "First Name", "Last Name", "CPAX Total", "MRC Total", "SOFA Total", "Manchester Mobility Score"}, 0);
    public DefaultTableModel tablePatientScores = new DefaultTableModel(new String[]{"[#]", "Item", "Score"}, 0);

    /**
     * Creates new form radarFrame
     */
    public radarFrame() {
        this.setLocationRelativeTo(null);
        createData();
        loadList();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radarPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPatients = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        lblPatientList = new javax.swing.JLabel();
        lblRadarChart = new javax.swing.JLabel();
        btnCpax = new javax.swing.JButton();
        btnSofa = new javax.swing.JButton();
        btnMrc = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPatientVisits = new javax.swing.JList<>();
        lblPatientVisits = new javax.swing.JLabel();
        lblScoreSheet = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        checkBoxCpax = new javax.swing.JCheckBox();
        checkBoxMrc = new javax.swing.JCheckBox();
        checkBoxSofa = new javax.swing.JCheckBox();
        btnAllFields = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuOther = new javax.swing.JMenu();
        replaceZeroCB = new javax.swing.JCheckBoxMenuItem();
        drawScoresCB = new javax.swing.JCheckBoxMenuItem();
        drawKeyCB = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medical Chart");
        setResizable(false);

        radarPanel.setBackground(new java.awt.Color(255, 255, 255));

        listPatients.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listPatients.setModel(patientListModel);
        listPatients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPatientsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listPatients);

        patientTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        patientTable.setModel(tablePatientOverview);
        patientTable.setEnabled(false);
        jScrollPane2.setViewportView(patientTable);

        lblPatientList.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblPatientList.setText("Patient List");

        lblRadarChart.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblRadarChart.setText("Radar Chart");

        btnCpax.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCpax.setText("CPAX");
        btnCpax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCpaxActionPerformed(evt);
            }
        });

        btnSofa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSofa.setText("SOFA");
        btnSofa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSofaActionPerformed(evt);
            }
        });

        btnMrc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnMrc.setText("MRC");
        btnMrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMrcActionPerformed(evt);
            }
        });

        listPatientVisits.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listPatientVisits.setModel(patientVisitModel);
        listPatientVisits.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPatientVisitsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listPatientVisits);

        lblPatientVisits.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblPatientVisits.setText("Visits");

        lblScoreSheet.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblScoreSheet.setText("Score Sheet");

        scoreTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        scoreTable.setModel(tablePatientScores);
        jScrollPane5.setViewportView(scoreTable);

        checkBoxCpax.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        checkBoxCpax.setSelected(true);
        checkBoxCpax.setText("CPAX");
        checkBoxCpax.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCpaxItemStateChanged(evt);
            }
        });

        checkBoxMrc.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        checkBoxMrc.setSelected(true);
        checkBoxMrc.setText("MRC");
        checkBoxMrc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxMrcItemStateChanged(evt);
            }
        });

        checkBoxSofa.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        checkBoxSofa.setSelected(true);
        checkBoxSofa.setText("SOFA");
        checkBoxSofa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxSofaItemStateChanged(evt);
            }
        });

        btnAllFields.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAllFields.setText("ALL FIELDS");
        btnAllFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllFieldsActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");
        jMenuBar1.add(jMenuFile);

        jMenuOther.setText("Options");

        replaceZeroCB.setSelected(true);
        replaceZeroCB.setText("Replace zero values");
        replaceZeroCB.setActionCommand("");
        replaceZeroCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                replaceZeroCBItemStateChanged(evt);
            }
        });
        jMenuOther.add(replaceZeroCB);

        drawScoresCB.setText("Draw scores");
        drawScoresCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                drawScoresCBItemStateChanged(evt);
            }
        });
        jMenuOther.add(drawScoresCB);

        drawKeyCB.setSelected(true);
        drawKeyCB.setText("Draw item key");
        drawKeyCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                drawKeyCBItemStateChanged(evt);
            }
        });
        jMenuOther.add(drawKeyCB);

        jMenuBar1.add(jMenuOther);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientList))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientVisits)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRadarChart)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCpax, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMrc, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSofa, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(checkBoxCpax)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(checkBoxMrc)
                                    .addGap(30, 30, 30)
                                    .addComponent(checkBoxSofa)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnAllFields, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(radarPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblScoreSheet)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblScoreSheet, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPatientList)
                        .addComponent(lblRadarChart)
                        .addComponent(lblPatientVisits)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(radarPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxCpax)
                    .addComponent(checkBoxMrc)
                    .addComponent(checkBoxSofa)
                    .addComponent(btnAllFields))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCpax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSofa)
                    .addComponent(btnMrc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listPatientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPatientsMouseClicked
        validSelection = false;

        // Clear previous information
        patientVisitModel.removeAllElements();

        // Removes scores
        for (int i = tablePatientScores.getRowCount(); i > 0; i--) {
            tablePatientScores.removeRow(i - 1);
        }

        // Removes overview
        for (int i = tablePatientOverview.getRowCount(); i > 0; i--) {
            tablePatientOverview.removeRow(i - 1);
        }

        // Removes radar chart
        if (radarPanel.getComponentCount() > 0) {
            radarPanel.remove(0);
            this.revalidate();
            this.repaint();
        }
        
        lblRadarChart.setText("Radar Chart");

        // Add dates of admissions when clicking on a patient ID
        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(listPatients.getSelectedValue())) {
                patientVisitModel.addElement(patientArr[i].getAdmission());
            }
        }
    }//GEN-LAST:event_listPatientsMouseClicked

    private void replaceZeroCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_replaceZeroCBItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_replaceZeroCBItemStateChanged

    private void drawScoresCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_drawScoresCBItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_drawScoresCBItemStateChanged

    private void listPatientVisitsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPatientVisitsMouseClicked

        validSelection = true;
        String selectedID = listPatients.getSelectedValue();
        String selectedVisit = listPatientVisits.getSelectedValue();

        // Checks validity of admission and ID selected, shows chart
        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(selectedID)) {
                if (patientArr[i].getAdmission().equals(selectedVisit)) {

                    radarPanel.removeAll(); //

                    radarPanel.add(chartBuilder(i));
                    this.revalidate(); //
                    this.repaint(); //
                    
                    lblRadarChart.setText("Radar Chart: " + selectedVisit);

                    // Empty table of information before showing new relevant information
                    if (tablePatientOverview.getRowCount() == 1) {
                        tablePatientOverview.removeRow(0);
                        tablePatientOverview.addRow(patientArr[i].getOverviewRow());
                    } else {
                        tablePatientOverview.addRow(patientArr[i].getOverviewRow());
                    }

                    break;
                }
            }
        }

    }//GEN-LAST:event_listPatientVisitsMouseClicked

    private void btnCpaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCpaxActionPerformed
        // Change to CPAX chart
        if (validSelection == true) {
            checkBoxCpax.setSelected(true);
            checkBoxMrc.setSelected(false);
            checkBoxSofa.setSelected(false);
        }
    }//GEN-LAST:event_btnCpaxActionPerformed

    private void btnSofaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSofaActionPerformed
        // Change to SOFA chart
        if (validSelection == true) {
            checkBoxCpax.setSelected(false);
            checkBoxMrc.setSelected(false);
            checkBoxSofa.setSelected(true);
        }
    }//GEN-LAST:event_btnSofaActionPerformed

    private void drawKeyCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_drawKeyCBItemStateChanged
        // Refresh the chart when option changed
        chartRefresh();
    }//GEN-LAST:event_drawKeyCBItemStateChanged

    private void checkBoxCpaxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCpaxItemStateChanged
        // TODO add your handling code here:
        chartRefresh();
    }//GEN-LAST:event_checkBoxCpaxItemStateChanged

    private void checkBoxMrcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxMrcItemStateChanged
        // TODO add your handling code here:
        chartRefresh();
    }//GEN-LAST:event_checkBoxMrcItemStateChanged

    private void checkBoxSofaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxSofaItemStateChanged
        // TODO add your handling code here:
        chartRefresh();
    }//GEN-LAST:event_checkBoxSofaItemStateChanged

    private void btnAllFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllFieldsActionPerformed
        // Change chart to all fields
        if (validSelection == true) {
            checkBoxCpax.setSelected(true);
            checkBoxMrc.setSelected(true);
            checkBoxSofa.setSelected(true);
        }
    }//GEN-LAST:event_btnAllFieldsActionPerformed

    private void btnMrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMrcActionPerformed
        // Change to MRC chart
        if (validSelection == true) {
            checkBoxCpax.setSelected(false);
            checkBoxMrc.setSelected(true);
            checkBoxSofa.setSelected(false);
        }
    }//GEN-LAST:event_btnMrcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(radarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new radarFrame().setVisible(true);
            }
        });
    }

    public void createData() {
        Cpax cpax = new Cpax(5, 5, 2, 2, 4, 2, 4, 3, 0, 1, 28);
        Mrc mrc = new Mrc(4, 5, 3, 3, 1, 3, 1, 4, 2, 5, 4, 2, 1, 3, 5, 3, 5, 4, 5, 4, 2, 5, 5, 3, 82);
        Sofa sofa = new Sofa(4, 4, 3, 0, 1, 2, 14);
        Patient John = new Patient("1234", "John", "Smith", "5 Transfers with assistance", "22/01/2015", cpax, mrc, sofa);
        patientArr[0] = John;

        cpax = new Cpax(5, 5, 2, 2, 4, 2, 2, 2, 1, 0, 25);
        mrc = new Mrc(5, 5, 3, 0, 0, 5, 0, 4, 0, 5, 0, 4, 5, 0, 5, 0, 5, 0, 5, 0, 0, 5, 5, 0, 65);
        sofa = new Sofa(1, 2, 3, 0, 5, 4, 15);
        Patient Jane = new Patient("2345", "Jane", "Doe", "10 Transfers with assistance", "22/01/2015", cpax, mrc, sofa);
        patientArr[1] = Jane;

        cpax = new Cpax(4, 4, 1, 1, 3, 1, 1, 2, 0, 0, 33);
        mrc = new Mrc(3, 4, 2, 2, 0, 2, 0, 3, 1, 4, 3, 1, 0, 2, 4, 2, 4, 3, 4, 3, 1, 4, 4, 2, 58);
        sofa = new Sofa(3, 3, 2, 0, 0, 2, 10);
        John = new Patient("1234", "John", "Smith", "5 Transfers with assistance", "23/01/2015", cpax, mrc, sofa);
        patientArr[2] = John;
    }

    /*
     *  Loads data for the lists, ideally needs to be replaced with a Json serialisation
     *  Best case scenario, even some kind of excel CSV conversion
     */
    public void loadList() {
        int counter = 0;

        for (int i = 0; i < patientArr.length; i++) {
            patientListModel.addElement(patientArr[i].getPoid());
        }

        for (int i = 0; i < patientListModel.getSize(); i++) {
            String patientID = patientListModel.getElementAt(i).toString();
            for (int ii = 0; ii < patientListModel.getSize(); ii++) {
                if (patientListModel.get(ii).toString() == patientID) {
                    counter++;

                    if (counter > 1) {
                        patientListModel.removeElementAt(ii);
                        counter = 0;
                    }
                }
            }
        }
    }

    /*
     *  Used to build the chart, 'chartType' is used to determine if the user
     *  is trying to view the Cpax, Mrc, or Sofa
     */
    public Chart chartBuilder(int index) {
        int scores[] = ScoreBuilder(index, checkBoxCpax.isSelected(), checkBoxMrc.isSelected(), checkBoxSofa.isSelected());

        int slices = scores.length;
        int size = 428;

        // Build chart, check for changed options
        Chart chart = new Chart(slices, scores, size, replaceZeroCB.getState(), drawScoresCB.getState(), drawKeyCB.getState());

        return chart;
    }

    /*
     *  Chart refresh procedure that is commonly used for when something the user
     *  has clicked should change particular parts of the chart
     */
    public void chartRefresh() {
        radarPanel.removeAll();
        String selected = listPatients.getSelectedValue();

        // Find the right patient by looping for the selected value
        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(selected)) {

                // radarPanel.add(chartBuilder(i, currentSelection));
                radarPanel.add(chartBuilder(i));
                this.revalidate();
                this.repaint();

                if (tablePatientOverview.getRowCount() == 1) {
                    tablePatientOverview.removeRow(0);
                    tablePatientOverview.addRow(patientArr[i].getOverviewRow());
                } else {
                    tablePatientOverview.addRow(patientArr[i].getOverviewRow());
                }

                break;
            }
        }
    }

    // CURRENTLY VOIDED
    public void setChartScoreTable(int chartSelection) {
        /*
        String selectedID = patientList.getSelectedValue();
        String selectedVisit = patientVisitList.getSelectedValue();

        for (int i = 0; i < patientArr.length; i++) {
            if (patientArr[i].getPoid().equals(selectedID)) {
                if (patientArr[i].getAdmission().equals(selectedVisit)) {

                    String[] items = {};
                    int[] scores = {};

                    if (chartSelection == 1) {
                        items = patientArr[i].getCpax().getItems();
                        scores = patientArr[i].getCpax().getScores();
                        lblRadarChart.setText("Radar Chart (CPAX)");
                    } else if (chartSelection == 2) {
                        items = patientArr[i].getMrc().getItems();
                        scores = patientArr[i].getMrc().getScores();
                        lblRadarChart.setText("Radar Chart (MRC)");
                    } else if (chartSelection == 3) {
                        items = patientArr[i].getSofa().getItems();
                        scores = patientArr[i].getSofa().getScores();
                        lblRadarChart.setText("Radar Chart (SOFA)");
                    }

                    if (tableIsFull == false) {

                        for (int ii = 0; ii < items.length; ii++) {
                            tablePatientScores.addRow(new Object[]{(ii + 1), items[ii], scores[ii]});
                        }

                        tableIsFull = true;

                    } else {

                        for (int ii = (tablePatientScores.getRowCount() - 1); ii > 0; ii--) {
                            tablePatientScores.removeRow(ii);

                            if (tablePatientScores.getRowCount() == 1) {
                                tablePatientScores.removeRow(0);
                            }
                        }

                        tableIsFull = false;
                        setChartScoreTable(currentSelection);

                    }
                }
            }
        }
         */
    }

    /*
     *  Prepares an array that is built of the scores that have been selected 
     *  for viewing by the user
     */
    public int[] ScoreBuilder(int index, boolean cpaxCheck, boolean mrcCheck, boolean sofaCheck) {

        int totalLength = 0;
        int arrayPos = 0;

        if (cpaxCheck == true) {
            totalLength = totalLength + patientArr[index].getCpax().getScores().length;
        }
        if (mrcCheck == true) {
            totalLength = totalLength + patientArr[index].getMrc().getScores().length;
        }
        if (sofaCheck == true) {
            totalLength = totalLength + patientArr[index].getSofa().getScores().length;
        }

        int[] radarScores = new int[totalLength];

        if (cpaxCheck == true) {
            for (int i : patientArr[index].getCpax().getScores()) {
                radarScores[arrayPos] = i;
                arrayPos++;
            }
        }
        if (mrcCheck == true) {
            for (int i : patientArr[index].getMrc().getScores()) {
                radarScores[arrayPos] = i;
                arrayPos++;
            }
        }
        if (sofaCheck == true) {
            for (int i : patientArr[index].getSofa().getScores()) {
                radarScores[arrayPos] = i;
                arrayPos++;
            }
        }

        return radarScores;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllFields;
    private javax.swing.JButton btnCpax;
    private javax.swing.JButton btnMrc;
    private javax.swing.JButton btnSofa;
    private javax.swing.JCheckBox checkBoxCpax;
    private javax.swing.JCheckBox checkBoxMrc;
    private javax.swing.JCheckBox checkBoxSofa;
    private javax.swing.JCheckBoxMenuItem drawKeyCB;
    private javax.swing.JCheckBoxMenuItem drawScoresCB;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuOther;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblPatientList;
    private javax.swing.JLabel lblPatientVisits;
    private javax.swing.JLabel lblRadarChart;
    private javax.swing.JLabel lblScoreSheet;
    private javax.swing.JList<String> listPatientVisits;
    private javax.swing.JList<String> listPatients;
    public javax.swing.JTable patientTable;
    public javax.swing.JPanel radarPanel;
    private javax.swing.JCheckBoxMenuItem replaceZeroCB;
    private javax.swing.JTable scoreTable;
    // End of variables declaration//GEN-END:variables
}
